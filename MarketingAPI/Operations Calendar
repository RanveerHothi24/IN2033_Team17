import java.sql.*;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

public class OperationsCalendar implements VenueCalendar {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/in2033t17";
    private static final String DB_USER = "in2033t17_d";
    private static final String DB_PASSWORD = "qKvalvobOa0";

    @Override
    public List<EventSchedule> getShowSchedules() {
        List<EventSchedule> schedules = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                 "SELECT c.event_id, c.start_date_time, r.name AS venue_name " +
                 "FROM calendar c " +
                 "JOIN rooms r ON c.room_id = r.room_id " +
                 "ORDER BY c.start_date_time")) {

            while (rs.next()) {
                schedules.add(new EventSchedule(
                    rs.getInt("event_id"),
                    rs.getTimestamp("start_date_time").toLocalDateTime(),
                    rs.getString("venue_name")
                ));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving show schedules: " + e.getMessage());
        }
        return schedules;
    }

    @Override
    public String getSetupDetails(int eventId) {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                 "SELECT c.config_required, s.total_seats, s.restricted_seats, s.wheelchair_seats " +
                 "FROM calendar c " +
                 "LEFT JOIN seating_config s ON c.event_id = s.event_id " +
                 "WHERE c.event_id = ?")) {

            pstmt.setInt(1, eventId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                return String.format(
                    "Setup Details for Event ID %d:\n" +
                    "Configuration: %s\n" +
                    "Total Seats: %d\n" +
                    "Restricted Seats: %s\n" +
                    "Wheelchair Seats: %s",
                    eventId,
                    rs.getString("config_required") != null ? rs.getString("config_required") : "N/A",
                    rs.getInt("total_seats"),
                    rs.getString("restricted_seats") != null ? rs.getString("restricted_seats") : "None",
                    rs.getString("wheelchair_seats") != null ? rs.getString("wheelchair_seats") : "None"
                );
            }
        } catch (SQLException e) {
            return "Error retrieving setup details: " + e.getMessage();
        }
        return "Event ID " + eventId + " not found.";
    }

    @Override
    public List<TimeSlot> findAvailableGaps(String roomId, String startDate, String endDate) {
        List<TimeSlot> gaps = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(
                 "SELECT start_date_time, end_date_time " +
                 "FROM calendar " +
                 "WHERE room_id = ? AND start_date_time BETWEEN ? AND ? " +
                 "ORDER BY start_date_time")) {

            pstmt.setString(1, roomId);
            pstmt.setString(2, startDate + " 00:00:00");
            pstmt.setString(3, endDate + " 23:59:59");
            ResultSet rs = pstmt.executeQuery();

            LocalDateTime rangeStart = LocalDateTime.parse(startDate + "T00:00:00");
            LocalDateTime rangeEnd = LocalDateTime.parse(endDate + "T23:59:59");
            LocalDateTime current = rangeStart;

            while (rs.next()) {
                LocalDateTime eventStart = rs.getTimestamp("start_date_time").toLocalDateTime();
                LocalDateTime eventEnd = rs.getTimestamp("end_date_time").toLocalDateTime();

                if (current.isBefore(eventStart)) {
                    gaps.add(new TimeSlot(current, eventStart, roomId));
                }
                current = eventEnd.isAfter(current) ? eventEnd : current;
            }

            if (current.isBefore(rangeEnd)) {
                gaps.add(new TimeSlot(current, rangeEnd, roomId));
            }
        } catch (SQLException e) {
            System.err.println("Error finding available gaps: " + e.getMessage());
        }
        return gaps;
    }

    @Override
    public List<Event> getRestrictedPeriods() {
        List<Event> restrictedEvents = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(
                 "SELECT c.event_id, c.show_name, c.start_date_time, c.status, c.contract_deadline, co.category " +
                 "FROM calendar c " +
                 "JOIN contracts co ON c.show_name = co.show_name " +
                 "WHERE c.status = 'Hold' OR c.contract_deadline IS NOT NULL")) {

            while (rs.next()) {
                restrictedEvents.add(new Event(
                    rs.getInt("event_id"),
                    rs.getString("show_name"),
                    rs.getTimestamp("start_date_time").toLocalDateTime(),
                    rs.getString("category") + " (Status: " + rs.getString("status") +
                    ", Deadline: " + (rs.getDate("contract_deadline") != null ? rs.getDate("contract_deadline").toString() : "N/A") + ")"
                ));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving restricted periods: " + e.getMessage());
        }
        return restrictedEvents;
    }
}
